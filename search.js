window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "flow2quake", "modulename": "flow2quake", "kind": "module", "doc": "<p>Flow2Quake is a package for building composable simulation pipelines for calculating\ninduced seismicity in fracking and CCS reservoirs.</p>\n"}, {"fullname": "flow2quake.base", "modulename": "flow2quake.base", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "flow2quake.base.Model", "modulename": "flow2quake.base", "qualname": "Model", "kind": "class", "doc": "<p>Model base class.</p>\n"}, {"fullname": "flow2quake.base.Model.load", "modulename": "flow2quake.base", "qualname": "Model.load", "kind": "function", "doc": "<p>Load the model from the input directory</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong>:  directory to load the model</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">input_directory</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "flow2quake.base.Model.export", "modulename": "flow2quake.base", "qualname": "Model.export", "kind": "function", "doc": "<p>Pickle the model to the output directory</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong>:  directory to save the model</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">output_directory</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "flow2quake.base.Outline", "modulename": "flow2quake.base", "qualname": "Outline", "kind": "class", "doc": "<p>Outline base class. Comprising points (<code>points</code>) encircle the outline.\nDO NOT repeat the first point at the end of the list.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>list[tuple[float, float]] points</strong>:  list of points defining the outline</li>\n</ul>\n"}, {"fullname": "flow2quake.base.Outline.__init__", "modulename": "flow2quake.base", "qualname": "Outline.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">points</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span>)</span>"}, {"fullname": "flow2quake.base.Outline.points", "modulename": "flow2quake.base", "qualname": "Outline.points", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[tuple[float, float]]"}, {"fullname": "flow2quake.base.Outline.polygon", "modulename": "flow2quake.base", "qualname": "Outline.polygon", "kind": "variable", "doc": "<p>Get outline as <code>mshr.Polygon</code> object from outline points</p>\n", "annotation": ": mshr.cpp.Polygon"}, {"fullname": "flow2quake.base.Reservoir", "modulename": "flow2quake.base", "qualname": "Reservoir", "kind": "class", "doc": "<p>Class describing geometry &amp; material properties for a single reservoir.</p>\n\n<p><code>*_points</code> params are the coordinates of the points in the reservoir, e.g.\n<code>np.array([[x1, y1], [x2, y2], ...])</code></p>\n\n<p><code>*_field</code> params are the values of the field at the points, e.g.\n<code>np.array([val1, val2, ...])</code></p>\n"}, {"fullname": "flow2quake.base.Reservoir.__init__", "modulename": "flow2quake.base", "qualname": "Reservoir.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">thickness_points</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">thickness_field</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">porosity_points</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">porosity_field</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">permeability_points</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">permeability_field</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">depth_points</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">depth_field</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">pressure_points</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">pressure_field</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">temperature_points</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">temperature_field</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span>)</span>"}, {"fullname": "flow2quake.base.Reservoir.thickness_points", "modulename": "flow2quake.base", "qualname": "Reservoir.thickness_points", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "flow2quake.base.Reservoir.thickness_field", "modulename": "flow2quake.base", "qualname": "Reservoir.thickness_field", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "flow2quake.base.Reservoir.porosity_points", "modulename": "flow2quake.base", "qualname": "Reservoir.porosity_points", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "flow2quake.base.Reservoir.porosity_field", "modulename": "flow2quake.base", "qualname": "Reservoir.porosity_field", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "flow2quake.base.Reservoir.permeability_points", "modulename": "flow2quake.base", "qualname": "Reservoir.permeability_points", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "flow2quake.base.Reservoir.permeability_field", "modulename": "flow2quake.base", "qualname": "Reservoir.permeability_field", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "flow2quake.base.Reservoir.depth_points", "modulename": "flow2quake.base", "qualname": "Reservoir.depth_points", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "flow2quake.base.Reservoir.depth_field", "modulename": "flow2quake.base", "qualname": "Reservoir.depth_field", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "flow2quake.base.Reservoir.pressure_points", "modulename": "flow2quake.base", "qualname": "Reservoir.pressure_points", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "flow2quake.base.Reservoir.pressure_field", "modulename": "flow2quake.base", "qualname": "Reservoir.pressure_field", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "flow2quake.base.Reservoir.temperature_points", "modulename": "flow2quake.base", "qualname": "Reservoir.temperature_points", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "flow2quake.base.Reservoir.temperature_field", "modulename": "flow2quake.base", "qualname": "Reservoir.temperature_field", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "flow2quake.diffusion", "modulename": "flow2quake.diffusion", "kind": "module", "doc": "<p>Reservoir diffusion model</p>\n"}, {"fullname": "flow2quake.diffusion.base", "modulename": "flow2quake.diffusion.base", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "flow2quake.diffusion.base.Liquid", "modulename": "flow2quake.diffusion.base", "qualname": "Liquid", "kind": "class", "doc": "<p>Liquid base class</p>\n"}, {"fullname": "flow2quake.diffusion.base.Liquid.__init__", "modulename": "flow2quake.diffusion.base", "qualname": "Liquid.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">rho_0</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">mu_0</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">mu_1</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">cv</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">kr</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">p_ref</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span>)</span>"}, {"fullname": "flow2quake.diffusion.base.Liquid.rho_0", "modulename": "flow2quake.diffusion.base", "qualname": "Liquid.rho_0", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "flow2quake.diffusion.base.Liquid.c", "modulename": "flow2quake.diffusion.base", "qualname": "Liquid.c", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "flow2quake.diffusion.base.Liquid.mu_0", "modulename": "flow2quake.diffusion.base", "qualname": "Liquid.mu_0", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "flow2quake.diffusion.base.Liquid.mu_1", "modulename": "flow2quake.diffusion.base", "qualname": "Liquid.mu_1", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "flow2quake.diffusion.base.Liquid.cv", "modulename": "flow2quake.diffusion.base", "qualname": "Liquid.cv", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "flow2quake.diffusion.base.Liquid.kr", "modulename": "flow2quake.diffusion.base", "qualname": "Liquid.kr", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "flow2quake.diffusion.base.Liquid.p_ref", "modulename": "flow2quake.diffusion.base", "qualname": "Liquid.p_ref", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "flow2quake.diffusion.base.Liquid.rho", "modulename": "flow2quake.diffusion.base", "qualname": "Liquid.rho", "kind": "function", "doc": "<p>Density profile of water</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>float p</strong>:  Pressure in Pascals</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">p</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "flow2quake.diffusion.base.Liquid.mu", "modulename": "flow2quake.diffusion.base", "qualname": "Liquid.mu", "kind": "function", "doc": "<p>Viscosity profile of water</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>float p</strong>:  Pressure in Pascals</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">p</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "flow2quake.diffusion.base.Liquid.from_coolprop", "modulename": "flow2quake.diffusion.base", "qualname": "Liquid.from_coolprop", "kind": "function", "doc": "<p>Liquid object with CoolProp parameters for a given liquid (<code>coolprop_id</code>)</p>\n\n<p>Common liquid: <code>\"WATER\"</code></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>float temp</strong>:  temperature in K</li>\n<li><strong>float p_ref</strong>:  reference pressure in Pascals</li>\n<li><strong>float p_extreme</strong>:  extreme pressure in Pascals\n:returns: Water as a Liquid object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">coolprop_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">temp_K</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">p_ref</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">p_extreme</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">flow2quake</span><span class=\"o\">.</span><span class=\"n\">diffusion</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Liquid</span>:</span></span>", "funcdef": "def"}, {"fullname": "flow2quake.diffusion.base.Liquid.water", "modulename": "flow2quake.diffusion.base", "qualname": "Liquid.water", "kind": "function", "doc": "<p>Liquid with default water properties</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>float temp</strong>:  temperature in K</li>\n<li><strong>float p_ref</strong>:  reference pressure in Pascals</li>\n<li><strong>float p_extreme</strong>:  extreme pressure in Pascals\n:returns: Water as a Liquid object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">temp_K</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">p_ref</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">p_extreme</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">flow2quake</span><span class=\"o\">.</span><span class=\"n\">diffusion</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Liquid</span>:</span></span>", "funcdef": "def"}, {"fullname": "flow2quake.diffusion.base.Gas", "modulename": "flow2quake.diffusion.base", "qualname": "Gas", "kind": "class", "doc": "<p>Gas base class</p>\n"}, {"fullname": "flow2quake.diffusion.base.Gas.__init__", "modulename": "flow2quake.diffusion.base", "qualname": "Gas.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">rho_0</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">mu_0</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">mu_1</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">cv</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">kr</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">p_ref</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span>)</span>"}, {"fullname": "flow2quake.diffusion.base.Gas.rho_0", "modulename": "flow2quake.diffusion.base", "qualname": "Gas.rho_0", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "flow2quake.diffusion.base.Gas.c", "modulename": "flow2quake.diffusion.base", "qualname": "Gas.c", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "flow2quake.diffusion.base.Gas.mu_0", "modulename": "flow2quake.diffusion.base", "qualname": "Gas.mu_0", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "flow2quake.diffusion.base.Gas.mu_1", "modulename": "flow2quake.diffusion.base", "qualname": "Gas.mu_1", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "flow2quake.diffusion.base.Gas.cv", "modulename": "flow2quake.diffusion.base", "qualname": "Gas.cv", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "flow2quake.diffusion.base.Gas.kr", "modulename": "flow2quake.diffusion.base", "qualname": "Gas.kr", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "flow2quake.diffusion.base.Gas.s", "modulename": "flow2quake.diffusion.base", "qualname": "Gas.s", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "flow2quake.diffusion.base.Gas.p_ref", "modulename": "flow2quake.diffusion.base", "qualname": "Gas.p_ref", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "flow2quake.diffusion.base.Gas.rho", "modulename": "flow2quake.diffusion.base", "qualname": "Gas.rho", "kind": "function", "doc": "<p>Density profile of the gas</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>float p</strong>:  Pressure in Pascals</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">p</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "flow2quake.diffusion.base.Gas.mu", "modulename": "flow2quake.diffusion.base", "qualname": "Gas.mu", "kind": "function", "doc": "<p>Viscosity profile of the gas</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>float p</strong>:  Pressure in Pascals</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">p</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "flow2quake.diffusion.base.Gas.from_coolprop", "modulename": "flow2quake.diffusion.base", "qualname": "Gas.from_coolprop", "kind": "function", "doc": "<p>Gas object with CoolProp parameters for a given gas (<code>coolprop_id</code>)</p>\n\n<p>Common gas: <code>\"CO2\"</code></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str coolprop_id</strong>:  CoolProp ID of the gas</li>\n<li><strong>float temp</strong>:  temperature in K</li>\n<li><strong>float p_ref</strong>:  reference pressure in Pascals</li>\n<li><strong>float p_extreme</strong>:  extreme pressure in Pascals\n:returns Water: CO2 as a Gas object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">coolprop_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">temp_K</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">p_ref</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">p_extreme</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">flow2quake</span><span class=\"o\">.</span><span class=\"n\">diffusion</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Gas</span>:</span></span>", "funcdef": "def"}, {"fullname": "flow2quake.diffusion.base.Gas.CO2", "modulename": "flow2quake.diffusion.base", "qualname": "Gas.CO2", "kind": "function", "doc": "<p>Gas with default CO2 properties</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>float temp</strong>:  temperature in K</li>\n<li><strong>float p_ref</strong>:  reference pressure in Pascals</li>\n<li><strong>float p_extreme</strong>:  extreme pressure in Pascals\n:returns: CO2 as a Gas object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">temp_K</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">p_ref</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">p_extreme</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">flow2quake</span><span class=\"o\">.</span><span class=\"n\">diffusion</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Gas</span>:</span></span>", "funcdef": "def"}, {"fullname": "flow2quake.diffusion.base.FlowSource", "modulename": "flow2quake.diffusion.base", "qualname": "FlowSource", "kind": "class", "doc": "<p>Class containing data a single well, or \"flow source\"</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str name</strong>:  name of the well</li>\n<li><strong>float x</strong>:  x-coordinate of the well</li>\n<li><strong>float y</strong>:  y-coordinate of the well</li>\n<li><strong>list[tuple[float, float, float]] flow_history</strong>:  list of tuples\nformatted as <code>(flow rate, time_start, time_stop)</code> for this well</li>\n</ul>\n"}, {"fullname": "flow2quake.diffusion.base.FlowSource.__init__", "modulename": "flow2quake.diffusion.base", "qualname": "FlowSource.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">flow_history</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span>)</span>"}, {"fullname": "flow2quake.diffusion.base.FlowSource.name", "modulename": "flow2quake.diffusion.base", "qualname": "FlowSource.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "flow2quake.diffusion.base.FlowSource.x", "modulename": "flow2quake.diffusion.base", "qualname": "FlowSource.x", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "flow2quake.diffusion.base.FlowSource.y", "modulename": "flow2quake.diffusion.base", "qualname": "FlowSource.y", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "flow2quake.diffusion.base.FlowSource.flow_history", "modulename": "flow2quake.diffusion.base", "qualname": "FlowSource.flow_history", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[tuple[float, float, float]]"}, {"fullname": "flow2quake.diffusion.base.FlowSource.point", "modulename": "flow2quake.diffusion.base", "qualname": "FlowSource.point", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dolfin.cpp.geometry.Point"}, {"fullname": "flow2quake.diffusion.base.DiffusionModelBase", "modulename": "flow2quake.diffusion.base", "qualname": "DiffusionModelBase", "kind": "class", "doc": "<p>Base class containing abstract functions that must be overridden by child diffusion models</p>\n", "bases": "flow2quake.base.Model, abc.ABC"}, {"fullname": "flow2quake.diffusion.base.DiffusionModelBase.computed_pressure_change_field", "modulename": "flow2quake.diffusion.base", "qualname": "DiffusionModelBase.computed_pressure_change_field", "kind": "variable", "doc": "<p>Computed pressure field for the diffusion model</p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "flow2quake.diffusion.multiphase", "modulename": "flow2quake.diffusion.multiphase", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "flow2quake.diffusion.multiphase.InitialConditions", "modulename": "flow2quake.diffusion.multiphase", "qualname": "InitialConditions", "kind": "class", "doc": "<p>Base class for user-defined Python Expression classes, where the\nuser overloads eval or eval_cell</p>\n", "bases": "dolfin.function.expression.UserExpression"}, {"fullname": "flow2quake.diffusion.multiphase.InitialConditions.__init__", "modulename": "flow2quake.diffusion.multiphase", "qualname": "InitialConditions.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">p_points</span>, </span><span class=\"param\"><span class=\"n\">p_field</span>, </span><span class=\"param\"><span class=\"n\">h_points</span>, </span><span class=\"param\"><span class=\"n\">h_field</span>, </span><span class=\"param\"><span class=\"n\">ME1</span></span>)</span>"}, {"fullname": "flow2quake.diffusion.multiphase.InitialConditions.p_points", "modulename": "flow2quake.diffusion.multiphase", "qualname": "InitialConditions.p_points", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "flow2quake.diffusion.multiphase.InitialConditions.p_field", "modulename": "flow2quake.diffusion.multiphase", "qualname": "InitialConditions.p_field", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "flow2quake.diffusion.multiphase.InitialConditions.h_points", "modulename": "flow2quake.diffusion.multiphase", "qualname": "InitialConditions.h_points", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "flow2quake.diffusion.multiphase.InitialConditions.h_field", "modulename": "flow2quake.diffusion.multiphase", "qualname": "InitialConditions.h_field", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "flow2quake.diffusion.multiphase.InitialConditions.ME1", "modulename": "flow2quake.diffusion.multiphase", "qualname": "InitialConditions.ME1", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "flow2quake.diffusion.multiphase.InitialConditions.Coords", "modulename": "flow2quake.diffusion.multiphase", "qualname": "InitialConditions.Coords", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "flow2quake.diffusion.multiphase.InitialConditions.eval", "modulename": "flow2quake.diffusion.multiphase", "qualname": "InitialConditions.eval", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">values</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "flow2quake.diffusion.multiphase.InitialConditions.value_shape", "modulename": "flow2quake.diffusion.multiphase", "qualname": "InitialConditions.value_shape", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "flow2quake.diffusion.multiphase.BoundaryConditions", "modulename": "flow2quake.diffusion.multiphase", "qualname": "BoundaryConditions", "kind": "class", "doc": "<p>Class to define boundary conditions</p>\n", "bases": "dolfin.function.expression.UserExpression"}, {"fullname": "flow2quake.diffusion.multiphase.BoundaryConditions.__init__", "modulename": "flow2quake.diffusion.multiphase", "qualname": "BoundaryConditions.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">p_points</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">p_field</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">h_points</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">h_field</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">ME1</span><span class=\"p\">:</span> <span class=\"n\">dolfin</span><span class=\"o\">.</span><span class=\"n\">function</span><span class=\"o\">.</span><span class=\"n\">functionspace</span><span class=\"o\">.</span><span class=\"n\">FunctionSpace</span></span>)</span>"}, {"fullname": "flow2quake.diffusion.multiphase.BoundaryConditions.p_points", "modulename": "flow2quake.diffusion.multiphase", "qualname": "BoundaryConditions.p_points", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "flow2quake.diffusion.multiphase.BoundaryConditions.p_field", "modulename": "flow2quake.diffusion.multiphase", "qualname": "BoundaryConditions.p_field", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "flow2quake.diffusion.multiphase.BoundaryConditions.h_points", "modulename": "flow2quake.diffusion.multiphase", "qualname": "BoundaryConditions.h_points", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "flow2quake.diffusion.multiphase.BoundaryConditions.h_field", "modulename": "flow2quake.diffusion.multiphase", "qualname": "BoundaryConditions.h_field", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "flow2quake.diffusion.multiphase.BoundaryConditions.Coords", "modulename": "flow2quake.diffusion.multiphase", "qualname": "BoundaryConditions.Coords", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "flow2quake.diffusion.multiphase.BoundaryConditions.ME1", "modulename": "flow2quake.diffusion.multiphase", "qualname": "BoundaryConditions.ME1", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "flow2quake.diffusion.multiphase.BoundaryConditions.eval", "modulename": "flow2quake.diffusion.multiphase", "qualname": "BoundaryConditions.eval", "kind": "function", "doc": "<p>Evaluate the boundary conditions at a given point</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>values</strong>:  values to be computed</li>\n<li><strong>x</strong>:  point</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">values</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "flow2quake.diffusion.multiphase.BoundaryConditions.value_shape", "modulename": "flow2quake.diffusion.multiphase", "qualname": "BoundaryConditions.value_shape", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "flow2quake.diffusion.multiphase.VFEModel", "modulename": "flow2quake.diffusion.multiphase", "qualname": "VFEModel", "kind": "class", "doc": "<p></p>\n", "bases": "dolfin.cpp.nls.NonlinearProblem"}, {"fullname": "flow2quake.diffusion.multiphase.VFEModel.__init__", "modulename": "flow2quake.diffusion.multiphase", "qualname": "VFEModel.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>a</strong>:  bilinear form</li>\n<li><strong>L</strong>:  linear form</li>\n<li><strong>bcs</strong>:  boundary conditions</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span>, </span><span class=\"param\"><span class=\"n\">L</span>, </span><span class=\"param\"><span class=\"n\">bcs</span></span>)</span>"}, {"fullname": "flow2quake.diffusion.multiphase.VFEModel.L", "modulename": "flow2quake.diffusion.multiphase", "qualname": "VFEModel.L", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "flow2quake.diffusion.multiphase.VFEModel.a", "modulename": "flow2quake.diffusion.multiphase", "qualname": "VFEModel.a", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "flow2quake.diffusion.multiphase.VFEModel.bcs", "modulename": "flow2quake.diffusion.multiphase", "qualname": "VFEModel.bcs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "flow2quake.diffusion.multiphase.VFEModel.F", "modulename": "flow2quake.diffusion.multiphase", "qualname": "VFEModel.F", "kind": "function", "doc": "<p>Computes the residual vector</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>b</strong>:  vector</li>\n<li><strong>x</strong>:  vector</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">b</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "flow2quake.diffusion.multiphase.VFEModel.J", "modulename": "flow2quake.diffusion.multiphase", "qualname": "VFEModel.J", "kind": "function", "doc": "<p>Compute the Jacobian matrix</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>A</strong>:  matrix</li>\n<li><strong>x</strong>:  vector</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">A</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "flow2quake.diffusion.multiphase.VFEModel.from_problem", "modulename": "flow2quake.diffusion.multiphase", "qualname": "VFEModel.from_problem", "kind": "function", "doc": "<p>Define the variational problem for a multi-phase flow model using the finite element method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>base.Liquid water</strong>:  water object</li>\n<li><strong>base.Gas gas</strong>:  gas object</li>\n<li><strong>float dt</strong>:  time step</li>\n<li><strong>float t</strong>:  time</li>\n<li><strong>list[FlowSource] Sources_g</strong>:  gas sources</li>\n<li><strong>dolfin.FunctionSpace ME1</strong>:  function space</li>\n<li><strong>dolfin.Function H</strong>:  thickness function</li>\n<li><strong>dolfin.Function phi</strong>:  porosity function</li>\n<li><strong>float cr</strong>:  compressibility ratio</li>\n<li><strong>dolfin.Function u</strong>:  solution function</li>\n<li><strong>dolfin.Function p</strong>:  pressure function</li>\n<li><strong>dolfin.Function h</strong>:  thickness function</li>\n<li><strong>float p0</strong>:  initial pressure (Pa)</li>\n<li><strong>float h0</strong>:  initial thickness</li>\n<li><strong>dolfin.Function du</strong>:  solution increment</li>\n<li><strong>list bcs</strong>:  boundary conditions</li>\n<li><strong>float sigma</strong>:  standard deviation of flow rate</li>\n<li><strong>dolfin.Function v_p</strong>:  test function for pressure</li>\n<li><strong>dolfin.Function v_h</strong>:  test function for thickness</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">water</span><span class=\"p\">:</span> <span class=\"n\">flow2quake</span><span class=\"o\">.</span><span class=\"n\">diffusion</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Liquid</span>,</span><span class=\"param\">\t<span class=\"n\">gas</span><span class=\"p\">:</span> <span class=\"n\">flow2quake</span><span class=\"o\">.</span><span class=\"n\">diffusion</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Gas</span>,</span><span class=\"param\">\t<span class=\"n\">dt</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">t</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">flow_sources</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">ME1</span><span class=\"p\">:</span> <span class=\"n\">dolfin</span><span class=\"o\">.</span><span class=\"n\">function</span><span class=\"o\">.</span><span class=\"n\">functionspace</span><span class=\"o\">.</span><span class=\"n\">FunctionSpace</span>,</span><span class=\"param\">\t<span class=\"n\">H</span>,</span><span class=\"param\">\t<span class=\"n\">phi</span>,</span><span class=\"param\">\t<span class=\"n\">cr</span>,</span><span class=\"param\">\t<span class=\"n\">u</span>,</span><span class=\"param\">\t<span class=\"n\">p</span>,</span><span class=\"param\">\t<span class=\"n\">h</span>,</span><span class=\"param\">\t<span class=\"n\">p0</span>,</span><span class=\"param\">\t<span class=\"n\">h0</span>,</span><span class=\"param\">\t<span class=\"n\">du</span>,</span><span class=\"param\">\t<span class=\"n\">bcs</span>,</span><span class=\"param\">\t<span class=\"n\">sigma</span>,</span><span class=\"param\">\t<span class=\"n\">v_p</span>,</span><span class=\"param\">\t<span class=\"n\">v_h</span>,</span><span class=\"param\">\t<span class=\"n\">k</span>,</span><span class=\"param\">\t<span class=\"n\">g</span><span class=\"o\">=</span><span class=\"mf\">9.81</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "flow2quake.diffusion.multiphase.DiffusionModelMPParams", "modulename": "flow2quake.diffusion.multiphase", "qualname": "DiffusionModelMPParams", "kind": "class", "doc": "<p>Diffusion model parameters.</p>\n\n<p>:ivar float flow_source_stdev: standard deviation of flow source\n:ivar float timestep: time step (dt) in seconds\n:ivar int num_initial_mesh_refinements: number of initial mesh refinements\n:ivar int num_hydraulic_radius_refinements: number of mesh refinements for hydraulic radius\n:ivar int num_source_refinements: number of mesh refinements for sources\n:ivar float rock_compressibility: rock compressibility (cr), in Pa^-1\n:ivar float gravity: gravity (g), in m/s^2\n:ivar float dt_max: maximum time step in seconds. Defaults to 50x the timestep period.\n:ivar float boundary_conditions_tolerance: tolerance for boundary conditions in meters\n:ivar boundary_points: number of points on the boundary</p>\n"}, {"fullname": "flow2quake.diffusion.multiphase.DiffusionModelMPParams.__init__", "modulename": "flow2quake.diffusion.multiphase", "qualname": "DiffusionModelMPParams.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">flow_source_stdev</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">100.0</span>,</span><span class=\"param\">\t<span class=\"n\">timestep</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">86400</span>,</span><span class=\"param\">\t<span class=\"n\">num_initial_mesh_refinements</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">num_hydraulic_radius_refinements</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">num_source_refinements</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">rock_compressibility</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">3e-11</span>,</span><span class=\"param\">\t<span class=\"n\">gravity</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">9.81</span>,</span><span class=\"param\">\t<span class=\"n\">dt_max</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">boundary_conditions_tolerance</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">500</span>,</span><span class=\"param\">\t<span class=\"n\">boundary_points</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span></span>)</span>"}, {"fullname": "flow2quake.diffusion.multiphase.DiffusionModelMPParams.flow_source_stdev", "modulename": "flow2quake.diffusion.multiphase", "qualname": "DiffusionModelMPParams.flow_source_stdev", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "100.0"}, {"fullname": "flow2quake.diffusion.multiphase.DiffusionModelMPParams.timestep", "modulename": "flow2quake.diffusion.multiphase", "qualname": "DiffusionModelMPParams.timestep", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "86400"}, {"fullname": "flow2quake.diffusion.multiphase.DiffusionModelMPParams.num_initial_mesh_refinements", "modulename": "flow2quake.diffusion.multiphase", "qualname": "DiffusionModelMPParams.num_initial_mesh_refinements", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "1"}, {"fullname": "flow2quake.diffusion.multiphase.DiffusionModelMPParams.num_hydraulic_radius_refinements", "modulename": "flow2quake.diffusion.multiphase", "qualname": "DiffusionModelMPParams.num_hydraulic_radius_refinements", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "1"}, {"fullname": "flow2quake.diffusion.multiphase.DiffusionModelMPParams.num_source_refinements", "modulename": "flow2quake.diffusion.multiphase", "qualname": "DiffusionModelMPParams.num_source_refinements", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "1"}, {"fullname": "flow2quake.diffusion.multiphase.DiffusionModelMPParams.rock_compressibility", "modulename": "flow2quake.diffusion.multiphase", "qualname": "DiffusionModelMPParams.rock_compressibility", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "3e-11"}, {"fullname": "flow2quake.diffusion.multiphase.DiffusionModelMPParams.gravity", "modulename": "flow2quake.diffusion.multiphase", "qualname": "DiffusionModelMPParams.gravity", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "9.81"}, {"fullname": "flow2quake.diffusion.multiphase.DiffusionModelMPParams.dt_max", "modulename": "flow2quake.diffusion.multiphase", "qualname": "DiffusionModelMPParams.dt_max", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "-1"}, {"fullname": "flow2quake.diffusion.multiphase.DiffusionModelMPParams.boundary_conditions_tolerance", "modulename": "flow2quake.diffusion.multiphase", "qualname": "DiffusionModelMPParams.boundary_conditions_tolerance", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "500"}, {"fullname": "flow2quake.diffusion.multiphase.DiffusionModelMPParams.boundary_points", "modulename": "flow2quake.diffusion.multiphase", "qualname": "DiffusionModelMPParams.boundary_points", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "100"}, {"fullname": "flow2quake.diffusion.multiphase.DiffusionModelMP", "modulename": "flow2quake.diffusion.multiphase", "qualname": "DiffusionModelMP", "kind": "class", "doc": "<p>Multiphase diffusion model.</p>\n\n<p>:ivar ProblemDomain domain: domain of the problem\n:ivar Reservoir reservoir: reservoir\n:ivar list[FlowSource] flow_sources: flow sources\n:ivar Gas gas: gas being injected\n:ivar Liquid liquid: liquid being injected</p>\n", "bases": "flow2quake.diffusion.base.DiffusionModelBase"}, {"fullname": "flow2quake.diffusion.multiphase.DiffusionModelMP.__init__", "modulename": "flow2quake.diffusion.multiphase", "qualname": "DiffusionModelMP.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mshr.Polygon domain</strong>:  domain of the problem</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">domain</span><span class=\"p\">:</span> <span class=\"n\">flow2quake</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Outline</span>,</span><span class=\"param\">\t<span class=\"n\">reservoir</span><span class=\"p\">:</span> <span class=\"n\">flow2quake</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Reservoir</span>,</span><span class=\"param\">\t<span class=\"n\">flow_sources</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">liquid</span><span class=\"p\">:</span> <span class=\"n\">flow2quake</span><span class=\"o\">.</span><span class=\"n\">diffusion</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Liquid</span>,</span><span class=\"param\">\t<span class=\"n\">gas</span><span class=\"p\">:</span> <span class=\"n\">flow2quake</span><span class=\"o\">.</span><span class=\"n\">diffusion</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Gas</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">flow2quake</span><span class=\"o\">.</span><span class=\"n\">diffusion</span><span class=\"o\">.</span><span class=\"n\">multiphase</span><span class=\"o\">.</span><span class=\"n\">DiffusionModelMPParams</span></span>)</span>"}, {"fullname": "flow2quake.diffusion.multiphase.DiffusionModelMP.domain", "modulename": "flow2quake.diffusion.multiphase", "qualname": "DiffusionModelMP.domain", "kind": "variable", "doc": "<p></p>\n", "annotation": ": flow2quake.base.Outline"}, {"fullname": "flow2quake.diffusion.multiphase.DiffusionModelMP.reservoir", "modulename": "flow2quake.diffusion.multiphase", "qualname": "DiffusionModelMP.reservoir", "kind": "variable", "doc": "<p></p>\n", "annotation": ": flow2quake.base.Reservoir"}, {"fullname": "flow2quake.diffusion.multiphase.DiffusionModelMP.flow_sources", "modulename": "flow2quake.diffusion.multiphase", "qualname": "DiffusionModelMP.flow_sources", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[flow2quake.diffusion.base.FlowSource]"}, {"fullname": "flow2quake.diffusion.multiphase.DiffusionModelMP.gas", "modulename": "flow2quake.diffusion.multiphase", "qualname": "DiffusionModelMP.gas", "kind": "variable", "doc": "<p></p>\n", "annotation": ": flow2quake.diffusion.base.Gas"}, {"fullname": "flow2quake.diffusion.multiphase.DiffusionModelMP.liquid", "modulename": "flow2quake.diffusion.multiphase", "qualname": "DiffusionModelMP.liquid", "kind": "variable", "doc": "<p></p>\n", "annotation": ": flow2quake.diffusion.base.Liquid"}, {"fullname": "flow2quake.diffusion.multiphase.DiffusionModelMP.dt", "modulename": "flow2quake.diffusion.multiphase", "qualname": "DiffusionModelMP.dt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "flow2quake.diffusion.multiphase.DiffusionModelMP.setup", "modulename": "flow2quake.diffusion.multiphase", "qualname": "DiffusionModelMP.setup", "kind": "function", "doc": "<p>Set up and solve the diffusion model.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">solver</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "flow2quake.diffusion.multiphase.DiffusionModelMP.step", "modulename": "flow2quake.diffusion.multiphase", "qualname": "DiffusionModelMP.step", "kind": "function", "doc": "<p>Solve the diffusion model for the current time step.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>float t</strong>:  time in seconds</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "flow2quake.diffusion.multiphase.DiffusionModelMP.run", "modulename": "flow2quake.diffusion.multiphase", "qualname": "DiffusionModelMP.run", "kind": "function", "doc": "<p>Run the diffusion model until the maximum time is reached.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>float max_time</strong>:  maximum time in seconds</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">max_time</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "flow2quake.diffusion.multiphase.DiffusionModelMP.mesh", "modulename": "flow2quake.diffusion.multiphase", "qualname": "DiffusionModelMP.mesh", "kind": "variable", "doc": "<p>Dump the problem mesh of the reservoir.</p>\n", "annotation": ": dolfin.cpp.mesh.Mesh"}, {"fullname": "flow2quake.diffusion.multiphase.DiffusionModelMP.solution", "modulename": "flow2quake.diffusion.multiphase", "qualname": "DiffusionModelMP.solution", "kind": "variable", "doc": "<p>Return the solution of the diffusion model.</p>\n\n<p>:returns dolfin.Function: solution</p>\n", "annotation": ": dolfin.function.function.Function"}, {"fullname": "flow2quake.diffusion.multiphase.DiffusionModelMP.solution_prev", "modulename": "flow2quake.diffusion.multiphase", "qualname": "DiffusionModelMP.solution_prev", "kind": "variable", "doc": "<p>Return the previous solution of the diffusion model.</p>\n\n<p>:returns dolfin.Function: solution</p>\n", "annotation": ": dolfin.function.function.Function"}, {"fullname": "flow2quake.diffusion.multiphase.DiffusionModelMP.computed_pressure_change_field", "modulename": "flow2quake.diffusion.multiphase", "qualname": "DiffusionModelMP.computed_pressure_change_field", "kind": "variable", "doc": "<p>Return the pressure field computed by the diffusion model.</p>\n\n<p>:returns np.ndarray: pressure field as a 2D numpy array of format\n    <code>[[x1, y1, p1], [x2, y2, p2], ...]</code></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "flow2quake.diffusion.singlephase", "modulename": "flow2quake.diffusion.singlephase", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "flow2quake.diffusion.singlephase.DiffusionModelSPParams", "modulename": "flow2quake.diffusion.singlephase", "qualname": "DiffusionModelSPParams", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "flow2quake.diffusion.singlephase.DiffusionModelSPParams.__init__", "modulename": "flow2quake.diffusion.singlephase", "qualname": "DiffusionModelSPParams.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sigma</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span>)</span>"}, {"fullname": "flow2quake.diffusion.singlephase.DiffusionModelSPParams.sigma", "modulename": "flow2quake.diffusion.singlephase", "qualname": "DiffusionModelSPParams.sigma", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "flow2quake.diffusion.singlephase.DiffusionModelSP", "modulename": "flow2quake.diffusion.singlephase", "qualname": "DiffusionModelSP", "kind": "class", "doc": "<p>Single-phase diffusion model.</p>\n", "bases": "flow2quake.base.Model"}, {"fullname": "flow2quake.mechanical", "modulename": "flow2quake.mechanical", "kind": "module", "doc": "<p>Geomechanical deformation model</p>\n\n<p>Model is based on :\nSmith, J. D., Heimisson, E. R., Bourne, S. J., &amp; Avouac, J. P. (2022). \nStress-based forecasting of induced seismicity with instantaneous earthquake \nfailure functions: applications to the Groningen Gas Reservoir. Earth and \nPlanetary Science Letters, 594, 117697.</p>\n"}, {"fullname": "flow2quake.mechanical.GeoBlock", "modulename": "flow2quake.mechanical", "qualname": "GeoBlock", "kind": "class", "doc": "<p>Each <code>GeoBlock</code> is a representation of a tiled cuboid in the geomechanical model\nof the reservoir. Change in w_Z is the vertical displacement of the block.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>float x</strong>:  min-aligned x-coordinate of the reservoir block</li>\n<li><strong>float y</strong>:  min-aligned y-coordinate of the reservoir block</li>\n<li><strong>float z</strong>:  absolute depth of the bottom of the cuboid</li>\n<li><strong>float w_x</strong>:  width of the cuboid</li>\n<li><strong>float w_y</strong>:  length of the cuboid</li>\n<li><strong>float w_z</strong>:  height of the cuboid from bottom depth to the top</li>\n</ul>\n"}, {"fullname": "flow2quake.mechanical.GeoBlock.__init__", "modulename": "flow2quake.mechanical", "qualname": "GeoBlock.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">z</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">w_x</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">w_y</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">w_z</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span>)</span>"}, {"fullname": "flow2quake.mechanical.GeoBlock.x", "modulename": "flow2quake.mechanical", "qualname": "GeoBlock.x", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "flow2quake.mechanical.GeoBlock.y", "modulename": "flow2quake.mechanical", "qualname": "GeoBlock.y", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "flow2quake.mechanical.GeoBlock.z", "modulename": "flow2quake.mechanical", "qualname": "GeoBlock.z", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "flow2quake.mechanical.GeoBlock.w_x", "modulename": "flow2quake.mechanical", "qualname": "GeoBlock.w_x", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "flow2quake.mechanical.GeoBlock.w_y", "modulename": "flow2quake.mechanical", "qualname": "GeoBlock.w_y", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "flow2quake.mechanical.GeoBlock.w_z", "modulename": "flow2quake.mechanical", "qualname": "GeoBlock.w_z", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "flow2quake.mechanical.GeomechanicalModelParams", "modulename": "flow2quake.mechanical", "qualname": "GeomechanicalModelParams", "kind": "class", "doc": "<p>Calibration parameters for <code>GeomechanicalModel</code></p>\n"}, {"fullname": "flow2quake.mechanical.GeomechanicalModelParams.__init__", "modulename": "flow2quake.mechanical", "qualname": "GeomechanicalModelParams.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filter_distance</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">750.0</span></span>)</span>"}, {"fullname": "flow2quake.mechanical.GeomechanicalModelParams.filter_distance", "modulename": "flow2quake.mechanical", "qualname": "GeomechanicalModelParams.filter_distance", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "750.0"}, {"fullname": "flow2quake.mechanical.GeomechanicalModel", "modulename": "flow2quake.mechanical", "qualname": "GeomechanicalModel", "kind": "class", "doc": "<p>Model base class.</p>\n", "bases": "flow2quake.base.Model"}, {"fullname": "flow2quake.mechanical.GeomechanicalModel.__init__", "modulename": "flow2quake.mechanical", "qualname": "GeomechanicalModel.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">reservoir</span><span class=\"p\">:</span> <span class=\"n\">flow2quake</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Reservoir</span>,</span><span class=\"param\">\t<span class=\"n\">pressure_change_field</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">flow2quake</span><span class=\"o\">.</span><span class=\"n\">mechanical</span><span class=\"o\">.</span><span class=\"n\">GeomechanicalModelParams</span> <span class=\"o\">=</span> <span class=\"n\">GeomechanicalModelParams</span><span class=\"p\">(</span><span class=\"n\">filter_distance</span><span class=\"o\">=</span><span class=\"mf\">750.0</span><span class=\"p\">)</span></span>)</span>"}, {"fullname": "flow2quake.mechanical.GeomechanicalModel.pressure_change_field", "modulename": "flow2quake.mechanical", "qualname": "GeomechanicalModel.pressure_change_field", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "flow2quake.mechanical.GeomechanicalModel.reservoir", "modulename": "flow2quake.mechanical", "qualname": "GeomechanicalModel.reservoir", "kind": "variable", "doc": "<p></p>\n", "annotation": ": flow2quake.base.Reservoir"}, {"fullname": "flow2quake.mechanical.GeomechanicalModel.from_diffusion_model", "modulename": "flow2quake.mechanical", "qualname": "GeomechanicalModel.from_diffusion_model", "kind": "function", "doc": "<p>Create geomechanical model from a reservoir diffusion model</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>DiffusionModelBase dm</strong>:  diffusion model\n:returns GeomechanicalModel: new geomechanical model</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dm</span><span class=\"p\">:</span> <span class=\"n\">flow2quake</span><span class=\"o\">.</span><span class=\"n\">diffusion</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">DiffusionModelBase</span></span><span class=\"return-annotation\">) -> <span class=\"n\">flow2quake</span><span class=\"o\">.</span><span class=\"n\">mechanical</span><span class=\"o\">.</span><span class=\"n\">GeomechanicalModel</span>:</span></span>", "funcdef": "def"}, {"fullname": "flow2quake.mechanical.stress_strain", "modulename": "flow2quake.mechanical.stress_strain", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "flow2quake.mechanical.stress_strain.StrainVolume", "modulename": "flow2quake.mechanical.stress_strain", "qualname": "StrainVolume", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "flow2quake.mechanical.stress_strain.StrainVolume.__init__", "modulename": "flow2quake.mechanical.stress_strain", "qualname": "StrainVolume.__init__", "kind": "function", "doc": "<p>Initiate stage</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "flow2quake.mechanical.stress_strain.StrainVolume.LoadBlocks", "modulename": "flow2quake.mechanical.stress_strain", "qualname": "StrainVolume.LoadBlocks", "kind": "function", "doc": "<p>Function to determine features for a series of strain volumes</p>\n\n<p>Input:\n    BLOCKS - Pandas Array with headings 'X','Y','Z','wX','wY','wZ','dP'</p>\n\n<p>Return:\n    self.vertices   -\n    self.dP         -\n    self.BlockThick -</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">BLOCKS</span>,</span><span class=\"param\">\t<span class=\"n\">PoissonRatio</span><span class=\"o\">=</span><span class=\"mf\">0.25</span>,</span><span class=\"param\">\t<span class=\"n\">BiotCoef</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">ShearModulus</span><span class=\"o\">=</span><span class=\"mf\">6000000000.0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "flow2quake.mechanical.stress_strain.StrainVolume.LoadPoints", "modulename": "flow2quake.mechanical.stress_strain", "qualname": "StrainVolume.LoadPoints", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">POINTS</span>, </span><span class=\"param\"><span class=\"n\">BoundaryCheck</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">BoundaryTolerance</span><span class=\"o\">=</span><span class=\"mf\">0.001</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "flow2quake.mechanical.stress_strain.StrainVolume.compute", "modulename": "flow2quake.mechanical.stress_strain", "qualname": "StrainVolume.compute", "kind": "function", "doc": "<p>Changes the coordinates before calling the function self.PointValues\nChanges them back again to go back to the previous coordinates system</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">verbrose</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">dv</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span>, </span><span class=\"param\"><span class=\"n\">GreenFunction</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "flow2quake.mechanical.stress_strain.StrainVolume.PointValues", "modulename": "flow2quake.mechanical.stress_strain", "qualname": "StrainVolume.PointValues", "kind": "function", "doc": "<p>Computes strain at the point location due to the volume changes within the series of\nblocks according the the Kuvshinov formulation</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">device</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span>, </span><span class=\"param\"><span class=\"n\">GreenFunction</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "flow2quake.mechanical.stress_strain.compute_coulomb_stress_at_depth", "modulename": "flow2quake.mechanical.stress_strain", "qualname": "compute_coulomb_stress_at_depth", "kind": "function", "doc": "<p>Compute the coulomb stress using the matrix computed with compute_green_functions()</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sv</span><span class=\"p\">:</span> <span class=\"n\">flow2quake</span><span class=\"o\">.</span><span class=\"n\">mechanical</span><span class=\"o\">.</span><span class=\"n\">stress_strain</span><span class=\"o\">.</span><span class=\"n\">StrainVolume</span>,</span><span class=\"param\">\t<span class=\"n\">RESdata_folder</span>,</span><span class=\"param\">\t<span class=\"n\">MESH</span>,</span><span class=\"param\">\t<span class=\"n\">pressures_list</span>,</span><span class=\"param\">\t<span class=\"n\">GF_folder</span>,</span><span class=\"param\">\t<span class=\"n\">activate_cuda</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">depth</span><span class=\"o\">=</span><span class=\"mi\">10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "flow2quake.seismicity", "modulename": "flow2quake.seismicity", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "flow2quake.units", "modulename": "flow2quake.units", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "flow2quake.units.MINUTE", "modulename": "flow2quake.units", "qualname": "MINUTE", "kind": "variable", "doc": "<p></p>\n", "default_value": "60"}, {"fullname": "flow2quake.units.HOUR", "modulename": "flow2quake.units", "qualname": "HOUR", "kind": "variable", "doc": "<p></p>\n", "default_value": "3600"}, {"fullname": "flow2quake.units.DAY", "modulename": "flow2quake.units", "qualname": "DAY", "kind": "variable", "doc": "<p></p>\n", "default_value": "86400"}, {"fullname": "flow2quake.units.YEAR", "modulename": "flow2quake.units", "qualname": "YEAR", "kind": "variable", "doc": "<p></p>\n", "default_value": "31536000"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();